import Foundation

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

class Fake{{protocol_name}} : {{protocol_name}}, Equatable {
    init() {
*       {{# getters }}
        self.set_{{ name }}Args = []
*       {{/ getters }}
*       {{# setters }}
        self.set_{{ name }}Args = []
*       {{/ setters }}
    }

*   {{# getters }}
    fileprivate var _{{ name  }} : {{ type }}?
    fileprivate var set_{{ name }}Args : Array<{{ type }}>
*   {{/ getters }}

*   {{# setters }}
    fileprivate var _{{ name  }} : {{ type }}?
    fileprivate var set_{{ name }}Args : Array<{{ type }}>
*   {{/ setters }}

*   {{# getters }}
    var {{ name }} : {{ type }} {
        get {
            return _{{ name }}!
        }

        set {
            _{{ name }} = newValue
            set_{{ name }}Args.append(newValue)
        }
    }

*   {{/ getters }}
*   {{# setters }}
    var {{ name }} : {{ type }} {
        get {
            return _{{ name }}!
        }

        set {
            _{{ name }} = newValue
            set_{{ name }}Args.append(newValue)
        }
    }

*   {{/ setters }}
*   {{# getters }}
    func set{{ capitalized_name }}CallCount() -> Int {
        return set_{{ name }}Args.count
    }

    func set{{ capitalized_name }}Args(forCall index : Int) throws -> {{ type }} {
        if index < 0 || index >= set_{{ name }}Args.count {
            throw NSError.init(domain: "swift-generate-fake-domain", code: 1, userInfo: nil)
        }
        return set_{{ name }}Args[index]
    }

*   {{/ getters }}
*   {{# setters }}
    func set{{ capitalized_name }}CallCount() -> Int {
        return set_{{ name }}Args.count
    }

    func set{{ capitalized_name }}Args(forCall index : Int) throws -> {{ type }} {
        if index < 0 || index >= set_{{ name }}Args.count {
            throw NSError.init(domain: "swift-generate-fake-domain", code: 1, userInfo: nil)
        }
        return set_{{ name }}Args[index]
    }

*   {{/ setters }}
*   {{# instance_methods }}
    fileprivate(set) var {{ name }}CallCount : Int = 0
*   {{# has_return_values }}
    var {{ name }}Stub : (({{{ comma_delimited_arg_types }}}){{throws}}-> ({{{ comma_delimited_return_types }}}))?
*   {{/ has_return_values }}
*   {{# has_arguments }}
    fileprivate var {{ name }}Args : Array<({{{ comma_delimited_arg_types }}})> = []
*   {{/ has_arguments }}
*   {{# has_return_values }}
    func {{ name }}Returns(stubbedValues: ({{{ comma_delimited_return_types }}})) {
        self.{{ name }}Stub = {({{ named_arguments }}) -> ({{{ comma_delimited_return_types }}}) in
            return stubbedValues
        }
    }
*   {{/ has_return_values }}
*   {{# has_arguments }}
    func {{ name }}Args(forCall callIndex: Int) -> ({{{ comma_delimited_arg_types }}}) {
        return self.{{ name }}Args[callIndex]
    }
*   {{/ has_arguments }}
    func {{name}}({{ named_arguments }}){{throws}}{{{ optional_return_expression }}}{
*       {{# has_return_values }}
        guard let stub = self.{{ name }}Stub else {
            fatalError("Fatal Error: You forgot to stub {{ name }}. Crashing. ðŸ’¥")
        }
*       {{/ has_return_values }}
        self.{{name}}CallCount += 1
*       {{# has_arguments }}
        self.{{ name }}Args.append(({{ comma_delimited_arg_names }}))
*       {{/ has_arguments }}
*       {{# has_return_values }}
        return {{pre_stub_invocation}}stub({{ comma_delimited_arg_names }})
*       {{/ has_return_values }}
    }

*   {{/ instance_methods }}
*   {{# static_methods }}
    fileprivate(set) static var {{ name }}CallCount : Int = 0
*   {{# has_return_values }}
    static var {{ name }}Stub : (({{{ comma_delimited_arg_types }}}){{throws}}-> ({{{ comma_delimited_return_types }}}))?
*   {{/ has_return_values }}
*   {{# has_arguments }}
    static fileprivate var {{ name }}Args : Array<({{{ comma_delimited_arg_types }}})> = []
*   {{/ has_arguments }}
*   {{# has_return_values }}
    static func {{ name }}Returns(stubbedValues: ({{{ comma_delimited_return_types }}})) {
        self.{{ name }}Stub = {({{{ named_arguments }}}) -> ({{{ comma_delimited_return_types }}}) in
            return stubbedValues
        }
    }
*   {{/ has_return_values }}
*   {{# has_arguments }}
    static func {{ name }}Args(forCall callIndex: Int) -> ({{{ comma_delimited_arg_types }}}) {
        return self.{{ name }}Args[callIndex]
    }
*   {{/ has_arguments }}
    static func {{name}}({{ named_arguments }}){{throws}}{{{ optional_return_expression }}}{
*       {{# has_return_values }}
        guard let stub = self.{{ name }}Stub else {
            fatalError("Fatal Error: You forgot to stub {{ name }}. Crashing. ðŸ’¥")
        }
*       {{/ has_return_values }}
        self.{{name}}CallCount += 1
*       {{# has_arguments }}
        self.{{ name }}Args.append(({{ comma_delimited_arg_names }}))
*       {{/ has_arguments }}
*       {{# has_return_values }}
        return {{pre_stub_invocation}}stub({{ comma_delimited_arg_names }})
*       {{/ has_return_values }}
    }

*   {{/ static_methods }}
    static func reset() {
*   {{# static_methods }}
*   {{# has_arguments }}
        self.{{ name }}Args = []
*   {{/ has_arguments }}
*   {{# has_return_values }}
        self.{{ name  }}Stub = nil
*   {{/ has_return_values }}
*   {{/ static_methods }}
    }
}

func == (a: Fake{{protocol_name}}, b: Fake{{protocol_name}}) -> Bool {
    return a === b
}
